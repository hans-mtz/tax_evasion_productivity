## Implementation

We are interested in the distribution of tax evasion $e$ but it cannot be observed. What is observed is the contaminated version 
$\mathcal{V}$ [@eq-ob-ev]. Evasion $e$ and the output shock $\varepsilon$ are independent [\ref{ass-ind}] with probability density distributions $f_e$ and $f_{\varepsilon}$. Then, from @def-conv

$$
f_{\mathcal{V}}(\mathcal{V})=\int f_e(\mathcal{V}+\varepsilon)f_{\varepsilon}(\varepsilon)\text{d}\varepsilon
$$

where $f_{\mathcal{V}}$ denotes the density of $\mathcal{V}$. 

### Parametric MLE

Assume a functional form for $f_{\varepsilon}(\cdot;\gamma)$ that depends on known parameters $\gamma$. Assume a known functional form for the density $f_e(\cdot;\lambda)$ that depends on unknown parameters $\lambda$. We can estimate parameters $\lambda$ by

$$
\hat \lambda = \arg \max_{\lambda}\sum_{i=1}^n \log \left(\int f_e(\mathcal{V}+\varepsilon;\lambda)f_{\varepsilon}(\varepsilon;\gamma)\text{d}\varepsilon\right)
$$ {#eq-mle}

Properties of MLE with unobserved scalar heterogeneity have been derived elsewhere before [@Chen2007; @Yi2021].

### Non-Parametric MLE

Consider the following log-density model:

$$
f_{e|\Theta}(e)=\exp(s(e;\theta)-C(\theta))
$$

where, 

$$
s(e;\theta)=\sum_{j=1}^{k_n}\theta_j B_j(e),
$$

$\{B_j(E), j=1,2,\dots\}$ is a sequence of known basis functions, and 

$$
C(\theta) = \log\left(\int \exp(s(e;\theta)) \text{d}e \right)
$$

The log likelihood of the observed variable $\mathcal{V}$ is

$$
\begin{aligned}
    l_{\mathcal{V}}(\mathbf{\theta})=&\sum_{i=1}^{n}\log \left(\int f_{\varepsilon}(e-\mathcal{V})\exp(s(e;\theta)-C(\theta))\text{d}e\right)\\
    =&\sum_{i=1}^{n}\log \left(\int f_{\varepsilon}(e-\mathcal{V})\exp(s(e;\theta))\text{d}e\right)-nC(\theta)
\end{aligned}
$$

The usual maximum likelihood estimate $\hat{\theta}$ is the maximizer of $l_{\mathcal{V}}(\theta)$.

Laguerre polynomials can be used to approximate any function $L_2([0,\infty), leb)$ $L_2$ norm relative to the Lebesgue measure and domain $[0,\infty)$ [@Chen2007].

The EM algorithm [@Kang2021] starts with an initial estimate $\hat{\mathbf{\theta}}^0$ and iteratively updates the estimate as follows.

**Expectation-Step**: Given the current estimate $\hat{\mathbf{\theta}}^{(k)}$ of $\hat{\mathbf{\theta}}$, calculate

$$
 b_j \left(\hat{\mathbf{\theta}}^{(k)}\right) = \sum_{i=1}^{n}\int B_j(e)f_{e|\mathcal{V},\hat{\theta}^{(k)}}(e|\mathcal{V})\text{d}e
$$

where,

$$
f_{e|\mathcal{V},\hat{\theta}}(e|\mathcal{V}) = f_{\varepsilon}(e-\mathcal{V})\exp(s(e;\theta)-C(\theta|\mathcal{V}))
$$

$$
C(\theta|\mathcal{V})=\log\left(\int f_{\varepsilon}(e-\mathcal{V})\exp(s(e;\theta))\text{d}e\right)
$$

**Maximization-Step**: Determine the updated estimate $\hat{\mathbf{\theta}}^{(k+1)}$ by maximizing

$$
Q(\mathbf{\theta}|\mathbf{\theta}^{(k)}) = \sum_{j=1}^{k_n}\theta_j b_j \left(\hat{\mathbf{\theta}}^{(k)}\right) - nC(\mathbf{\theta})
$$

The EM algorithm stops when $l_{\mathcal{V}}(\mathbf{\theta}^{(k+1)})-l_{\mathcal{V}}(\mathbf{\theta}^{(k)})<10^{-6}$.

### Fortran GNR

```{r}
#| label: tbl-CD-Stata-Fortran
#| tbl-cap: Cobb-Douglas production function parameters estimates using GNR Stata data and estimator vs. the Fortran GNR estimator.

# load("../Code/Products/deconv_prod_fun.RData")
load("../Code/Products/Fortran_CD_GNR.RData")

left_join(Stata_results,CD_fortran_tbl[,c(1,3,2,4)], by=c("INDS"="inds")) %>%
  kbl(
    col.names = c("Industry", "m","k","l","m","k","l"),
    digits = 4,
    table.attr = 'data-quarto-disable-processing="true"'
  ) %>%
  add_header_above(
      c(" "=1,"Stata GNR"=3, "Fortran GNR"=3)#
  ) %>%
  kable_classic(full_width=F, html_font = "Cambria")

```



```{r}
#| label: tbl-fortran-gnr
#| tbl-cap: GNR Fortran implementation. Bias-corrected Bootstrap confidence intervals, 95% significance level, 250 repetitions.
#| echo: false
#| warning: false

fortran_gnr <- tribble(
    ~Industry, ~Implementation,~Estimate,~m, ~l, ~k, 
    "311", "Stata", "mean elasticity", 0.67, 0.22, 0.12,
    "311", "Fortran", "mean elasticity",.68867344,.22215679,.10996130, 
    "311", "Fortran","LCI",.68566285,.21960601,.10817073,
    "311", "Fortran","UCI",.69203629,.22445365,.11165320,
    "321", "Stata", "mean elasticity", 0.54, 0.32, 0.16,
    "321", "Fortran", "mean elasticity", .58772782,.33504245,.12100036,
    "321", "Fortran", "LCI",.58354659,.33116173,.11778809,
    "321", "Fortran", "UCI",.59176468,.33894814,.12374840,
    "322", "Stata", "mean elasticity", 0.52, 0.42, 0.05,
    "322", "Fortran", "mean elasticity", .57329557,.40757876,.36815224E-01,
    "322", "Fortran", "LCI",.56875683,.40279332,.36412139E-01,
    "322", "Fortran", "UCI",.57829406,.41189006,.37263870E-01,
    "331", "Stata", "mean elasticity", 0.51, 0.44, 0.04,
    "331", "Fortran", "mean elasticity",.54696732,.42890784,.28400284E-01,
    "331", "Fortran", "LCI",.53953007,.42114309,.24590548E-01,
    "331", "Fortran", "UCI",.55516056,.43715581,.31658542E-01,
    "381", "Stata", "mean elasticity", 0.53, 0.29, 0.03,
    "381", "Fortran", "mean elasticity",.59271906,.38956320,.84889960E-01,
    "381", "Fortran", "LCI",.58963970,.38596049,.83332520E-01,
    "381", "Fortran", "UCI",.59598513,.39287295,.86487109E-01
) 

fortran_gnr %>%
    kbl(
        digits = 3,
        # col.names = c("Reform Year", "J.O. Affected", "Income Tax Change"),
        table.attr = 'data-quarto-disable-processing="true"'
    ) %>%
    kable_classic(full_width=F, html_font = "Cambria") %>% 
    collapse_rows(columns = 1:2, valign = "top")


```